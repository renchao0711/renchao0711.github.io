---
layout:     post

title:      "线程和进程到底什么区别？"

subtitle:   "RT"

date:       2017-07-13 15:25:00

author:     "renchao"

header-img: "img/2017.05.07.jpg"

tags: 

- iOS
---

#### 线程和进程到底什么区别？

> **进程**（process），是计算机中已运行[程序](https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F)的实体。进程为曾经是[分时系统](https://zh.wikipedia.org/wiki/%E5%88%86%E6%99%82%E7%B3%BB%E7%B5%B1)的基本运作单位。在面向进程设计的系统（如早期的[UNIX](https://zh.wikipedia.org/wiki/UNIX)，[Linux](https://zh.wikipedia.org/wiki/Linux) 2.4及更早的版本）中，**进程是程序的基本执行实体**；在面向线程设计的系统（如当代多数操作系统、[Linux](https://zh.wikipedia.org/wiki/Linux) 2.6及更新的版本）中，**进程本身不是基本运行单位，而是[线程](https://zh.wikipedia.org/wiki/%E5%9F%B7%E8%A1%8C%E7%B7%92)的容器**。
>
> **程序本身只是指令、数据及其组织形式的描述，进程才是程序（那些指令和数据）的真正运行实例**。若干进程有可能与同一个程序相关系，且每个进程皆可以同步（循序）或异步（[平行](https://zh.wikipedia.org/wiki/%E5%B9%B3%E8%A1%8C%E8%A8%88%E7%AE%97)）的方式独立运行。现代[计算机系统](https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%B3%BB%E7%B5%B1)可在同一段时间内以进程的形式将多个程序加载到内存中，并借由时间共享（或称[时分复用](https://zh.wikipedia.org/wiki/%E6%97%B6%E5%88%86%E5%A4%8D%E7%94%A8)），以在一个[处理器](https://zh.wikipedia.org/wiki/%E8%99%95%E7%90%86%E5%99%A8)上表现出同时（[平行性](https://zh.wikipedia.org/w/index.php?title=%E5%B9%B3%E8%A1%8C%E6%80%A7&action=edit&redlink=1)）运行的感觉。同样的，使用多线程技术（多线程即每一个线程都代表一个进程内的一个独立执行上下文）的操作系统或计算机架构，同样程序的平行线程，可在多CPU主机或网络上真正同时运行（在不同的CPU上）。

> **线程**（thread）**是[操作系统](https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)能够进行运算[调度](https://zh.wikipedia.org/wiki/%E8%B0%83%E5%BA%A6)的最小单位**。**它被包含在[进程](https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B)之中，是[进程](https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B)中的实际运作单位**。一条线程指的是[进程](https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B)中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。在[Unix System V](https://zh.wikipedia.org/wiki/Unix)及[SunOS](https://zh.wikipedia.org/wiki/SunOS)中也被称为轻量进程（lightweight processes），但轻量进程更多指内核线程（kernel thread），而把用户线程（user thread）称为线程。
>
> 线程是独立调度和分派的基本单位。线程可以操作系统内核调度的内核线程，如[Win32](https://zh.wikipedia.org/wiki/Win32)线程；由用户进程自行调度的用户线程，如Linux平台的POSIX Thread；或者由[内核](https://zh.wikipedia.org/wiki/%E5%86%85%E6%A0%B8)与用户进程，如[Windows 7](https://zh.wikipedia.org/wiki/Windows_7)的线程，进行混合调度。
>
> 同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，[文件描述符](https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6)和[信号处理](https://zh.wikipedia.org/wiki/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86)等等。但同一进程中的多个线程有各自的[调用栈](https://zh.wikipedia.org/wiki/%E8%B0%83%E7%94%A8%E6%A0%88)（call stack），自己的[寄存器环境](https://zh.wikipedia.org/w/index.php?title=%E5%AF%84%E5%AD%98%E5%99%A8%E7%8E%AF%E5%A2%83&action=edit&redlink=1)（register context），自己的线程本地存储（thread-local storage）。
>
> **一个进程可以有很多线程，每条线程并行执行不同的任务。**
>
> 在多核或多CPU，或支持Hyper-threading的CPU上使用多线程程序设计的好处是显而易见，即提高了程序的执行吞吐率。在单CPU单核的计算机上，使用多线程技术，也可以把进程中负责IO处理、人机交互而常被阻塞的部分与密集计算的部分分开来执行，编写专门的workhorse线程执行密集计算，从而提高了程序的执行效率。                                                                                                                                                                                                                                                                                            
>
> ​                                                                                                                                                          — 维基百科            

其实看了这么多，总结一下就是：

一个程序就是没有生命的代码，只有进程才能让这些代码运行起来。

一个程序至少要有一个进程，一个进程里至少有一个线程，只有一个线程的进程也就是单线程进程。

进程是操作系统能够将资源分配的独立单元，也就是说进程是能够享受独有单元的个体户。

线程可以当作是进程里的一个分支，很多线程就相当于工厂里的不同生产线。

线程是进程的实体，是CPU调度和分派的基本单元，它是比进程还小的能独立运行的基本单元。但是线程不单独拥有资源，只能在进程这个容器里共享资源，但是会拥有一些在运行中必不可少的资源，比如程序计数器，一组寄存器，栈，局部变量等。

因为进程是个体户，所以进程有独立的地址空间，一个进程崩溃后，对其他进程不会产生影响，但是一个线程死掉了，等于容纳该线程的整个进程死掉了。所以说多进程比多线程程序健壮，但是进程在切换时，消耗资源大，效率要差一些。

对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。

各有利弊，要按实际情况进行选择。

